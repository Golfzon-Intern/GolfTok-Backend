<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.golfzon.golftok.mapper.CommentMapper">

	<resultMap id="usersResult" type="com.golfzon.golftok.model.TokUsers">
		<id property="userId" column="user_id"/>
		<result property="userName" column="user_name" />
		<result property="userNickname" column="user_nickname" />
		<result property="userPassword" column="user_password" />
		<result property="userIcon" column="user_icon" />
		<result property="introductionMessage" column="introduction_message" />
		<result property="userGrade" column="user_grade" />
		<result property="followingCount" column="following_count" />
		<result property="followerCount" column="follower_count" />
		<result property="roleModel" column="role_model" />
		<result property="handicap" column="handicap" />
	</resultMap>

	<resultMap id="postsResult" type="com.golfzon.golftok.model.TokPosts">
		<id property="postId" column="post_id"/>
		<result property="userId" column="user_id" />
		<result property="postContent" column="post_content" />
		<result property="videoRoot" column="video_root" />
		<result property="uploadDate" column="upload_date" />
		<result property="likeCount" column="like_count" />
		<result property="commentCount" column="comment_count" />
		<result property="viewCount" column="view_count" />
		<result property="locations" column="locations" />
		<result property="postThumbnail" column="post_thumbnail" />
		<result property="golfClub" column="golf_club" />
	</resultMap>

	<resultMap id="commentsResult" type="com.golfzon.golftok.model.Comments">
		<id property="commentId" column="comment_id"/>
		<result property="postId" column="post_id" />
		<result property="userId" column="user_id" />
		<result property="commentText" column="comment_text" />
		<result property="uploadDate" column="upload_date" />
		<result property="likeCount" column="like_count" />
		<result property="commentGroup" column="comment_group" />
		<result property="groupOrder" column="group_order" />
		<result property="groupLayer" column="group_layer" />
	</resultMap>


	<!-- postId에 해당하는 부모 댓글 가져오기 -->
	<select id="getParentComments" parameterType="int" resultType="HashMap">
		select
			c.comment_id as commentId
			, c.post_id as postId
			, c.comment_text as commentText
			, convert(varchar(10), c.upload_date, 23) as uploadDate
			, c.like_count as likeCount
			, c.comment_group as commentGroup
			, u.[user_id] as userId
			, u.[user_name] as userName
			, u.user_icon as userIcon
			, u.user_nickname as userNickname
			, (
				select
					count(1)
				from
					mdprj.dbo.comments with(nolock)
				where
					post_id = c.post_id
					and comment_group = c.comment_group
					and group_layer = 1
			) as childrenCount
		from
			mdprj.dbo.comments c with(nolock)
			inner join
			mdprj.dbo.tok_users u with(nolock) on c.[user_id] = u.[user_id]
		where
			post_id = #{postId}
			and group_layer = 0
		order by upload_date DESC
	</select>
	
	
	<!-- 자식 댓글 (대댓글) 가져오기 -->
	<select id="getChidrenComments" parameterType="int" resultType="HashMap">
		select
			comment_id as commentId
			, post_id as postId
			, comment_text as commentText
			, CONVERT(CHAR(10), upload_date, 23) as uploadDate
			, like_count as likeCount
			, comment_group as commentGroup
			, u.user_id as userId
			, u.user_name as userName
			, u.user_icon as userIcon
			, u.user_nickname as userNickname
		from 
			mdprj.dbo.comments c with(nolock)
			inner join
			mdprj.dbo.tok_users u with(nolock) on c.[user_id] = u.[user_id]
		where
			group_layer=1 and
			comment_group=#{commentId}
		order by group_order
	</select>
	
		
	<!-- 댓글 작성 -->
	<insert id="inputComment" parameterType="HashMap">
		<selectKey resultType="integer" keyProperty="commentId" order="BEFORE">
			select 
				MAX(comment_id)+1 
			from 
				comments with(nolock)
		</selectKey>
		insert into comments values
			(#{commentId},#{postId},#{userId},#{commentText},getdate(),0,
			<if test="commentGroup==0">#{commentId}</if>
			<if test="commentGroup!=0">#{commentGroup}</if>,
			#{groupOrder},#{groupLayer})
	</insert>

	<!-- commentGroup의 댓글 총 개수 구하기 -->
	<select id="getCommentCount" parameterType="String" resultType="int">
		select 
			count(*) 
		from 
			comments with(nolock)
		where 
			comment_group=#{commentGroup}
	</select>
	
	<!-- 임시로 넣었던 groupOrder 다시 맞게 수정 -->
	<update id="updateGroupOrder" parameterType="String">
		update 
			comments
		set 
			group_order=#{groupOrder}
		where 
			group_order='-1'
	</update>
	
	<!-- 댓글 수정 -->
	<update id="editComment" parameterType="HashMap">
		update 
			comments
		set 
			comment_text=#{commentText}
		where 
			comment_id=#{commentId}
	</update>
	
	
	<!-- commentId로 postId 가져오기 -->
	<select id="getPostIdByCommentId" parameterType="int" resultType="int">
		select 
			post_id 
		from 
			comments with(nolock)
		where 
			comment_id=#{commentId}
	</select>
	
	<!-- commentId로 groupLayer 가져오기 -->
	<select id="getGroupLayerByCommentId" parameterType="int" resultType="int">
		select 
			group_layer 
		from 
			comments with(nolock)
		where 
			comment_id=#{commentId}
	</select>
	
	<!-- commentId로 groupOrder 가져오기 -->
	<select id="getGroupOrderByCommentId" parameterType="int" resultType="int">
		select 
			group_order 
		from 
			comments with(nolock)
		where 
			comment_id=#{commentId}
	</select>
	
	<!-- commentId로 commentGroup 가져오기 -->
	<select id="getCommentGroupByCommentId" parameterType="int" resultType="int">
		select 
			comment_group 
		from 
			comments with(nolock)
		where 
			comment_id=#{commentId}
	</select>


	<!-- 댓글 삭제 => 대댓글도 모두 삭제 -->
	<delete id="deleteComment" parameterType="int">
		delete 
		from 
			comments
		where 
			comment_group=#{commentGroup}
	</delete>
	
	<!-- 대댓글 삭제 1 : 대댓글 삭제 -->
	<delete id="deleteChildrenComment" parameterType="HashMap">
		delete 
		from 
			comments
		where 
			group_order=#{groupOrder} 
			and comment_group=#{commentGroup} 
			and group_layer=1
	</delete>
	
	<!-- 대댓글 삭제 2 : 대댓글 순서 정렬 -->
	<update id="orderChildrenComment" parameterType="HashMap">
		update 
			comments
		set 
			group_order-=1
		where 
			comment_group=#{commentGroup} 
			and group_layer=1 
			and group_order <![CDATA[ > ]]> #{groupOrder}
	</update>


	<!-- 댓글, 대댓글 좋아요 -->
	<update id="likeComment" parameterType="int">
		update 
			comments
		set 
			like_count+=1
		where 
			comment_id=#{commentId}
	</update>
	
	<!-- 댓글, 대댓글 좋아요 취소 -->
	<update id="unlikeComment" parameterType="int">
		update 
			comments
		set 
			like_count-=1
		where 
			comment_id=#{commentId}
	</update>
	
	<!-- 댓글 좋아요 수 가져오기 -->
	<select id="getCommentLikeCount" parameterType="int" resultType="int">
		select 
			like_count
		from 
			comments with(nolock)
		where 
			comment_id=#{commentId}
	</select>
	
	<!-- 삽입 한 댓글 가져오기 -->
	<select id="getLatestComment" resultType="int">
		select
			top 1
			comment_id
		from  
			comments with(nolock)
		order by
			comment_id DESC
	</select>
	
	<!-- 댓글id로 댓글 가져오기 -->
	<select id="getCommentByCommentId" parameterType="HashMap" resultType="HashMap">
		select
			comment_id as commentId
			, post_id as postId
			, comment_text as commentText
			, CONVERT(CHAR(10), upload_date, 23) as uploadDate
			, like_count as likeCount
			, comment_group as commentGroup
			, u.[user_id] as userId
			, u.[user_name] as userName
			, u.user_icon as userIcon
			, u.user_nickname as userNickname
		from
			mdprj.dbo.comments c with(nolock)
			inner join
			mdprj.dbo.tok_users u with(nolock) on c.[user_id] = u.[user_id]
		where
			comment_id=#{commentId}
	</select>
	
	<!-- 총 댓글 수 가져오기 -->
	<select id="getCommentCountByPostId" parameterType="int" resultType="int">
		select
			count(*)
		from 
			comments with(nolock)
		where
			post_id=#{postId}
	</select>
	
</mapper>